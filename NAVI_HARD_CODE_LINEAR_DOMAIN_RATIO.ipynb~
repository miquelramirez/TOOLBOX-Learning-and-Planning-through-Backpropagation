{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#NAVI_HARD_CODE_DOMAIN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import time\n",
    "from datetime import timedelta\n",
    "import math\n",
    "import os\n",
    "import pandas as pd\n",
    "#Functional coding\n",
    "import functools\n",
    "from functools import partial\n",
    "from tensorflow.python.ops import array_ops "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Data Path..\n",
    "Datapath=\"DATA/Navigation/linear/Navigation_Data.txt\"\n",
    "Labelpath=\"DATA/Navigation/linear/Navigation_Label.txt\"\n",
    "Rewardpath=\"DATA/Navigation/linear/Navigation_Reward.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Given local path, find full path\n",
    "def PathFinder(path):\n",
    "    #python 2\n",
    "    #script_dir = os.path.dirname('__file__')\n",
    "    #fullpath = os.path.join(script_dir,path)\n",
    "    #python 3\n",
    "    fullpath=os.path.abspath(path)\n",
    "    print(fullpath)\n",
    "    return fullpath\n",
    "\n",
    "#Read Data for Deep Learning\n",
    "def ReadData(path):\n",
    "    fullpath=PathFinder(path)\n",
    "    return pd.read_csv(fullpath, sep=',', header=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/wuga/Documents/Notebook/VAE-PLANNING/DATA/Navigation/linear/Navigation_Data.txt\n",
      "/home/wuga/Documents/Notebook/VAE-PLANNING/DATA/Navigation/linear/Navigation_Label.txt\n",
      "/home/wuga/Documents/Notebook/VAE-PLANNING/DATA/Navigation/linear/Navigation_Reward.txt\n"
     ]
    }
   ],
   "source": [
    "S_A_pd = ReadData(Datapath)\n",
    "SP_pd = ReadData(Labelpath)\n",
    "R_pd = ReadData(Rewardpath)\n",
    "S_A_matrix=S_A_pd.as_matrix()\n",
    "SP_matrix=SP_pd.as_matrix()\n",
    "R_matrix=R_pd.as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "default_settings = {\n",
    "    \"dims\"          : 2,\n",
    "    \"min_maze_bound\": tf.constant(0.0,dtype=tf.float32), \n",
    "    \"max_maze_bound\": tf.constant(10.0,dtype=tf.float32), \n",
    "    \"min_act_bound\": tf.constant(-1.0,dtype=tf.float32), \n",
    "    \"max_act_bound\": tf.constant(1.0,dtype=tf.float32), \n",
    "    \"goal\"    : tf.constant(8.0,dtype=tf.float32),\n",
    "    \"penalty\" : tf.constant(1000000.0,dtype=tf.float32),\n",
    "    \"centre\"  : tf.constant(5.0,dtype=tf.float32)\n",
    "   }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class NAVI(object):\n",
    "    def __init__(self, \n",
    "                 default_settings):\n",
    "        self.__dict__.update(default_settings)\n",
    "        self.zero = tf.constant(0,dtype=tf.float32)\n",
    "        self.two = tf.constant(2.0,dtype=tf.float32)\n",
    "        self.one = tf.constant(1.0,dtype=tf.float32)\n",
    "        self.onedsix = tf.constant(1.6,dtype=tf.float32)\n",
    "        self.onedtwo = tf.constant(1.2,dtype=tf.float32)\n",
    "        self.dotnifi = tf.constant(0.95,dtype=tf.float32)\n",
    "        self.doteight = tf.constant(0.8, dtype=tf.float32)\n",
    "        self.dotsix = tf.constant(0.6,dtype=tf.float32)\n",
    "        self.dotfour = tf.constant(0.4,dtype=tf.float32)\n",
    "        self.dottwo = tf.constant(0.2,dtype=tf.float32)\n",
    "        self.dotone = tf.constant(0.1,dtype = tf.float32)\n",
    "    \n",
    "    def MINMAZEBOUND(self, dim):\n",
    "        return self.min_maze_bound\n",
    "    \n",
    "    def MAXMAZEBOUND(self, dim):\n",
    "        return self.max_maze_bound\n",
    "    \n",
    "    def MINACTIONBOUND(self, dim):\n",
    "        return self.min_act_bound\n",
    "    \n",
    "    def MAXACTIONBOUND(self, dim):\n",
    "        return self.max_act_bound\n",
    "    \n",
    "    def GOAL(self, dim):\n",
    "        return self.goal\n",
    "    \n",
    "    def CENTER(self, dim):\n",
    "        return self.centre\n",
    "    \n",
    "    def PENALTY(self):\n",
    "        return self.penalty\n",
    "    \n",
    "    def _transition(self, dim, states_packed, actions_packed):\n",
    "        \n",
    "        states = tf.unpack(states_packed)\n",
    "        actions = tf.unpack(actions_packed)\n",
    "        \n",
    "        previous_state = states[dim]\n",
    "        \n",
    "        #distance to centre Manhattan\n",
    "        distance = self.zero\n",
    "        for i in range(len(states)):\n",
    "            distance+=tf.abs(states[i]-self.CENTER(i))\n",
    "        \n",
    "        #scale factor\n",
    "        #scalefactor = tf.cond(distance<self.two, lambda: distance/self.two, lambda: self.one)\n",
    "        #scalefactor = tf.cond(tf.logical_and(distance<=self.two, distance>self.onedsix),\n",
    "        #                lambda: self.onedsix/self.two,\n",
    "        #               lambda: tf.cond(tf.logical_and(distance<=self.onedsix, distance>self.onedtwo),\n",
    "        #                       lambda: self.onedtwo/self.two,\n",
    "        #                       lambda: tf.cond(tf.logical_and(distance<=self.onedtwo, distance>self.doteight),\n",
    "        #                                lambda: self.doteight/self.two,\n",
    "        #                                lambda: tf.cond(tf.logical_and(distance<=self.doteight, distance>self.dotfour),\n",
    "        #                                        lambda: self.dotfour/self.two,   \n",
    "        #                                        lambda: tf.cond(distance<=self.dotfour,\n",
    "        #                                                lambda: self.dotoofive,\n",
    "        #                                                lambda: self.one\n",
    "        #                                                )      \n",
    "        #                                               \n",
    "        #                                        )\n",
    "        #                                )  \n",
    "        #                        )\n",
    "        #                )\n",
    "        \n",
    "        discountfactor = tf.cond(tf.logical_and(distance<=self.two, distance>self.onedsix),\n",
    "                        lambda: self.dotone,\n",
    "                        lambda: tf.cond(tf.logical_and(distance<=self.onedsix, distance>self.onedtwo),\n",
    "                                lambda: self.dottwo,\n",
    "                                lambda: tf.cond(tf.logical_and(distance<=self.onedtwo, distance>self.doteight),\n",
    "                                        lambda: self.dotfour,\n",
    "                                        lambda: tf.cond(tf.logical_and(distance<=self.doteight, distance>self.dotfour),\n",
    "                                                lambda: self.dotsix,   \n",
    "                                                lambda: tf.cond(distance<=self.dotfour,\n",
    "                                                        lambda: self.dotnifi,\n",
    "                                                        lambda: self.zero\n",
    "                                                        )      \n",
    "                                                       \n",
    "                                                )\n",
    "                                        )  \n",
    "                                )\n",
    "                        )\n",
    "        \n",
    "        #proposed location\n",
    "        proposedLoc = tf.cond(tf.logical_and(actions[dim]>=self.zero, actions[dim]>=discountfactor),\n",
    "                             lambda: previous_state + actions[dim]-discountfactor,\n",
    "                             lambda:tf.cond(tf.logical_and(actions[dim]>=self.zero,actions[dim]<discountfactor),\n",
    "                                            lambda:previous_state,\n",
    "                                            lambda:tf.cond(tf.logical_and(actions[dim]<self.zero,-actions[dim]>=discountfactor),\n",
    "                                                          lambda:previous_state+actions[dim]+discountfactor,\n",
    "                                                          lambda:previous_state\n",
    "                                                          )\n",
    "                                           )\n",
    "                            )\n",
    "        \n",
    "        #new state\n",
    "        new_state = tf.cond(tf.logical_and(proposedLoc <= self.MAXMAZEBOUND(dim), proposedLoc >= self.MINMAZEBOUND(dim)), \\\n",
    "                            lambda: proposedLoc, \\\n",
    "                            lambda: tf.cond(proposedLoc >self.MAXMAZEBOUND(dim), lambda:self.MAXMAZEBOUND(dim), lambda:self.MINMAZEBOUND(dim) ) \\\n",
    "                           )\n",
    "        \n",
    "        return new_state\n",
    "    \n",
    "    # For single data point\n",
    "    def _vector_trans(self, state_size, states_packed, actions_packed):\n",
    "        new_states=[]\n",
    "        for i in range(state_size):\n",
    "            new_states.append(self._transition(i,states_packed,actions_packed))\n",
    "        return tf.pack(new_states)\n",
    "    \n",
    "    def Transition(self, states, actions):\n",
    "        new_states = []\n",
    "        batch_size,state_size = states.get_shape()\n",
    "        states_list = tf.unpack(states)\n",
    "        actions_list = tf.unpack(actions)\n",
    "        for i in range(batch_size):\n",
    "            new_states.append(self._vector_trans(state_size,states_list[i],actions_list[i]))\n",
    "        return tf.pack(new_states)\n",
    "    \n",
    "    def _reward(self, state_size, states_packed, actions_packed):\n",
    "        reward = self.zero\n",
    "        states = tf.unpack(states_packed)\n",
    "        actions = tf.unpack(actions_packed)\n",
    "        \n",
    "        for i in range(state_size):\n",
    "            reward -= tf.abs(states[i]-self.GOAL(i))\n",
    "        return tf.pack([reward])\n",
    "    \n",
    "    def Reward(self, states,actions):\n",
    "        new_rewards = []\n",
    "        batch_size,state_size = states.get_shape()\n",
    "        states_list = tf.unpack(states)\n",
    "        actions_list = tf.unpack(actions)\n",
    "        for i in range(batch_size):\n",
    "            new_rewards.append(self._reward(state_size,states_list[i],actions_list[i]))\n",
    "        return tf.pack(new_rewards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# States\n",
    "states = tf.placeholder(tf.float32,[30, 2],name=\"States\")\n",
    "\n",
    "# Actions\n",
    "actions = tf.placeholder(tf.float32,[30, 2],name=\"Actions\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "navi_inst = NAVI(default_settings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.2864389]\n",
      "[array([ 3.58680534,  4.28643894], dtype=float32)]\n",
      "[array([ 3.58680534,  4.28643894], dtype=float32)]\n"
     ]
    }
   ],
   "source": [
    "states_list=tf.unpack(states)\n",
    "actions_list = tf.unpack(actions)\n",
    "sess = tf.InteractiveSession()\n",
    "sess.run(tf.global_variables_initializer())\n",
    "feed_dict={states:S_A_matrix[:30,2:], actions:S_A_matrix[:30,:2]}\n",
    "new_state = navi_inst._transition(1,states_list[8],actions_list[8])\n",
    "print(sess.run([new_state], feed_dict=feed_dict))\n",
    "print(sess.run([states_list[9]], feed_dict=feed_dict))\n",
    "print(sess.run([states_list[9]], feed_dict=feed_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(2)])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states_list[8].get_shape()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0]\n"
     ]
    }
   ],
   "source": [
    "feed_dict={states:np.array([[0,0]]*30), actions:np.array([[1.0,1.0]]*30)  }\n",
    "new_state = navi_inst._transition(0,states_list[1],actions_list[1])\n",
    "print(sess.run([new_state], feed_dict=feed_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "new_rewards = navi_inst.Reward(states,actions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-16.        ],\n",
       "       [-15.0486908 ],\n",
       "       [-14.45474052],\n",
       "       [-14.18281746],\n",
       "       [-13.06755447],\n",
       "       [-13.33346748],\n",
       "       [-12.04419136],\n",
       "       [-10.35970879],\n",
       "       [ -9.259552  ],\n",
       "       [ -8.12675571],\n",
       "       [ -7.76328278],\n",
       "       [ -6.64727402],\n",
       "       [-16.        ],\n",
       "       [-16.        ],\n",
       "       [-15.79463196],\n",
       "       [-15.29909897],\n",
       "       [-15.39221764],\n",
       "       [-14.86650181],\n",
       "       [-13.72164154],\n",
       "       [-14.40450287],\n",
       "       [-14.44963074],\n",
       "       [-13.74181557],\n",
       "       [-13.46664429],\n",
       "       [-12.79545021],\n",
       "       [-16.        ],\n",
       "       [-14.33040237],\n",
       "       [-14.17589855],\n",
       "       [-12.88618851],\n",
       "       [-11.73449802],\n",
       "       [-10.57782745]], dtype=float32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feed_dict={states:S_A_matrix[:30,2:], actions:S_A_matrix[:30,:2]}\n",
    "sess.run(new_rewards,feed_dict=feed_dict )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class NAVICell(tf.nn.rnn_cell.RNNCell):\n",
    "\n",
    "    def __init__(self, default_settings):\n",
    "        self._num_state_units = 2\n",
    "        self._num_reward_units = 3\n",
    "        self.navi = NAVI(default_settings)\n",
    "\n",
    "    @property\n",
    "    def state_size(self):\n",
    "        return self._num_state_units\n",
    "\n",
    "    @property\n",
    "    def output_size(self):\n",
    "        return self._num_reward_units\n",
    "\n",
    "    def __call__(self, inputs, state, scope=None):\n",
    "        next_state =  self.navi.Transition(state, inputs)\n",
    "        reward = self.navi.Reward(state, inputs)      \n",
    "        return tf.concat(1,[reward,next_state]), next_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class ActionOptimizer(object):\n",
    "    def __init__(self,\n",
    "                a, # Actions\n",
    "                num_step, # Number of RNN step, this is a fixed step RNN sequence, 12 for navigation\n",
    "                num_act, # Number of actions\n",
    "                batch_size, #Batch Size\n",
    "                learning_rate=0.01): \n",
    "        self.action = tf.reshape(a,[-1,num_step,num_act]) #Reshape rewards\n",
    "        print(self.action)\n",
    "        self.batch_size = batch_size\n",
    "        self.num_step = num_step\n",
    "        self.learning_rate = learning_rate\n",
    "        self._p_create_rnn_graph()\n",
    "        self._p_create_loss()\n",
    "        self.sess = tf.InteractiveSession()\n",
    "        self.sess.run(tf.global_variables_initializer())\n",
    "    \n",
    "    def _p_create_rnn_graph(self):\n",
    "        cell = NAVICell(default_settings)\n",
    "        initial_state = cell.zero_state(self.batch_size, dtype=tf.float32)\n",
    "        print('action batch size:{0}'.format(array_ops.shape(self.action)[0]))\n",
    "        print('Initial_state shape:{0}'.format(initial_state))\n",
    "        rnn_outputs, state = tf.nn.dynamic_rnn(cell, self.action, dtype=tf.float32,initial_state=initial_state)\n",
    "        #need output intermediate states as well\n",
    "        concated = tf.concat(0,rnn_outputs)\n",
    "        print('concated shape:{0}'.format(concated.get_shape()))\n",
    "        something_unpacked =  tf.unpack(concated, axis=2)\n",
    "        self.outputs = tf.reshape(something_unpacked[0],[-1,self.num_step,1])\n",
    "        print(' self.outputs:{0}'.format(self.outputs.get_shape()))\n",
    "        self.intern_states = tf.pack([something_unpacked[1],something_unpacked[2]], axis=2)\n",
    "        self.last_state = state\n",
    "        self.pred = tf.reduce_sum(self.outputs,1)\n",
    "        print(\"self.pred:{0}\".format(self.pred))\n",
    "            \n",
    "    def _p_create_loss(self):\n",
    "\n",
    "        objective = tf.reduce_mean(self.pred) \n",
    "        self.loss = -objective\n",
    "        print(self.loss.get_shape())\n",
    "        #self.loss = -objective\n",
    "        self.optimizer = tf.train.RMSPropOptimizer(self.learning_rate).minimize(self.loss, var_list=[a])\n",
    "        \n",
    "    def Optimize(self,epoch=100):\n",
    "        \n",
    "        new_loss = self.sess.run([self.loss])\n",
    "        print('Loss in epoch {0}: {1}'.format(\"Initial\", new_loss)) \n",
    "        for epoch in range(epoch):\n",
    "            training = self.sess.run([self.optimizer])\n",
    "            self.sess.run(tf.assign(a, tf.clip_by_value(a, -1, 1)))\n",
    "            if True:\n",
    "                new_loss = self.sess.run([self.loss])\n",
    "                print('Loss in epoch {0}: {1}'.format(epoch, new_loss))  \n",
    "        minimum_costs_id=self.sess.run(tf.argmax(self.pred,0))\n",
    "        print(minimum_costs_id)\n",
    "        best_action = np.round(self.sess.run(self.action)[minimum_costs_id[0]],4)\n",
    "        print('Optimal Action Squence:{0}'.format(best_action))\n",
    "        print('Best Cost: {0}'.format(self.sess.run(self.pred)[minimum_costs_id[0]]))\n",
    "        print('The last state:{0}'.format(self.sess.run(self.last_state)[minimum_costs_id[0]]))\n",
    "        print('Rewards each time step:{0}'.format(self.sess.run(self.outputs)[minimum_costs_id[0]]))\n",
    "        print('Intermediate states:{0}'.format(self.sess.run(self.intern_states)[minimum_costs_id[0]]))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensor(\"Reshape:0\", shape=(10, 12, 2), dtype=float32)\n",
      "action batch size:Tensor(\"strided_slice:0\", shape=(), dtype=int32)\n",
      "Initial_state shape:Tensor(\"zeros:0\", shape=(10, 2), dtype=float32)\n",
      "concated shape:(10, 12, 3)\n",
      " self.outputs:(10, 12, 1)\n",
      "self.pred:Tensor(\"Sum:0\", shape=(10, 1), dtype=float32)\n",
      "()\n"
     ]
    }
   ],
   "source": [
    "a = tf.Variable(tf.truncated_normal(shape=[240],mean=0.0, stddev=0.5),name=\"action\")\n",
    "rnn_inst = ActionOptimizer(a, 12,2,10)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss in epoch Initial: [177.44742]\n",
      "Loss in epoch 0: [176.90736]\n",
      "Loss in epoch 1: [176.35814]\n",
      "Loss in epoch 2: [175.80411]\n",
      "Loss in epoch 3: [175.24472]\n",
      "Loss in epoch 4: [174.67615]\n",
      "Loss in epoch 5: [174.08392]\n",
      "Loss in epoch 6: [173.41525]\n",
      "Loss in epoch 7: [172.73758]\n",
      "Loss in epoch 8: [172.04671]\n",
      "Loss in epoch 9: [171.34831]\n",
      "Loss in epoch 10: [170.64188]\n",
      "Loss in epoch 11: [169.924]\n",
      "Loss in epoch 12: [169.19939]\n",
      "Loss in epoch 13: [168.46768]\n",
      "Loss in epoch 14: [167.72899]\n",
      "Loss in epoch 15: [166.98354]\n",
      "Loss in epoch 16: [166.23148]\n",
      "Loss in epoch 17: [165.47302]\n",
      "Loss in epoch 18: [164.70834]\n",
      "Loss in epoch 19: [163.93637]\n",
      "Loss in epoch 20: [163.14476]\n",
      "Loss in epoch 21: [162.32185]\n",
      "Loss in epoch 22: [161.50345]\n",
      "Loss in epoch 23: [160.67979]\n",
      "Loss in epoch 24: [159.85016]\n",
      "Loss in epoch 25: [159.0098]\n",
      "Loss in epoch 26: [158.15988]\n",
      "Loss in epoch 27: [157.30704]\n",
      "Loss in epoch 28: [156.44791]\n",
      "Loss in epoch 29: [155.55656]\n",
      "Loss in epoch 30: [154.64407]\n",
      "Loss in epoch 31: [153.64377]\n",
      "Loss in epoch 32: [152.61299]\n",
      "Loss in epoch 33: [151.59476]\n",
      "Loss in epoch 34: [150.61345]\n",
      "Loss in epoch 35: [149.6152]\n",
      "Loss in epoch 36: [148.64265]\n",
      "Loss in epoch 37: [147.68654]\n",
      "Loss in epoch 38: [146.69986]\n",
      "Loss in epoch 39: [145.71066]\n",
      "Loss in epoch 40: [144.79935]\n",
      "Loss in epoch 41: [143.86823]\n",
      "Loss in epoch 42: [142.89265]\n",
      "Loss in epoch 43: [142.02303]\n",
      "Loss in epoch 44: [141.10361]\n",
      "Loss in epoch 45: [140.27432]\n",
      "Loss in epoch 46: [139.45657]\n",
      "Loss in epoch 47: [138.59012]\n",
      "Loss in epoch 48: [137.75327]\n",
      "Loss in epoch 49: [137.01443]\n",
      "Loss in epoch 50: [136.16997]\n",
      "Loss in epoch 51: [135.33191]\n",
      "Loss in epoch 52: [134.5929]\n",
      "Loss in epoch 53: [133.76367]\n",
      "Loss in epoch 54: [132.97324]\n",
      "Loss in epoch 55: [132.17163]\n",
      "Loss in epoch 56: [131.44502]\n",
      "Loss in epoch 57: [130.7861]\n",
      "Loss in epoch 58: [130.00961]\n",
      "Loss in epoch 59: [129.11919]\n",
      "Loss in epoch 60: [128.49748]\n",
      "Loss in epoch 61: [127.65654]\n",
      "Loss in epoch 62: [126.93355]\n",
      "Loss in epoch 63: [126.35974]\n",
      "Loss in epoch 64: [125.62206]\n",
      "Loss in epoch 65: [124.77097]\n",
      "Loss in epoch 66: [124.20094]\n",
      "Loss in epoch 67: [123.40466]\n",
      "Loss in epoch 68: [122.7238]\n",
      "Loss in epoch 69: [122.52329]\n",
      "Loss in epoch 70: [121.86745]\n",
      "Loss in epoch 71: [121.09096]\n",
      "Loss in epoch 72: [120.46907]\n",
      "Loss in epoch 73: [119.91148]\n",
      "Loss in epoch 74: [119.43202]\n",
      "Loss in epoch 75: [118.76906]\n",
      "Loss in epoch 76: [118.10935]\n",
      "Loss in epoch 77: [117.50614]\n",
      "Loss in epoch 78: [116.97563]\n",
      "Loss in epoch 79: [116.32401]\n",
      "Loss in epoch 80: [115.9697]\n",
      "Loss in epoch 81: [115.48302]\n",
      "Loss in epoch 82: [115.00618]\n",
      "Loss in epoch 83: [114.62966]\n",
      "Loss in epoch 84: [114.06216]\n",
      "Loss in epoch 85: [113.57353]\n",
      "Loss in epoch 86: [113.1237]\n",
      "Loss in epoch 87: [112.66921]\n",
      "Loss in epoch 88: [113.00954]\n",
      "Loss in epoch 89: [112.75871]\n",
      "Loss in epoch 90: [112.2812]\n",
      "Loss in epoch 91: [111.67888]\n",
      "Loss in epoch 92: [111.20555]\n",
      "Loss in epoch 93: [111.20564]\n",
      "Loss in epoch 94: [111.14874]\n",
      "Loss in epoch 95: [110.80148]\n",
      "Loss in epoch 96: [110.3801]\n",
      "Loss in epoch 97: [110.18449]\n",
      "Loss in epoch 98: [109.77344]\n",
      "Loss in epoch 99: [109.65466]\n",
      "Loss in epoch 100: [109.34216]\n",
      "Loss in epoch 101: [109.08521]\n",
      "Loss in epoch 102: [108.79887]\n",
      "Loss in epoch 103: [108.54204]\n",
      "Loss in epoch 104: [108.19948]\n",
      "Loss in epoch 105: [108.07652]\n",
      "Loss in epoch 106: [108.16824]\n",
      "Loss in epoch 107: [107.94938]\n",
      "Loss in epoch 108: [107.82839]\n",
      "Loss in epoch 109: [107.5764]\n",
      "Loss in epoch 110: [107.42879]\n",
      "Loss in epoch 111: [107.3549]\n",
      "Loss in epoch 112: [107.09811]\n",
      "Loss in epoch 113: [106.8915]\n",
      "Loss in epoch 114: [106.65133]\n",
      "Loss in epoch 115: [106.4908]\n",
      "Loss in epoch 116: [106.25938]\n",
      "Loss in epoch 117: [106.02927]\n",
      "Loss in epoch 118: [106.16758]\n",
      "Loss in epoch 119: [106.26701]\n",
      "Loss in epoch 120: [106.01178]\n",
      "Loss in epoch 121: [105.8607]\n",
      "Loss in epoch 122: [105.73367]\n",
      "Loss in epoch 123: [105.492]\n",
      "Loss in epoch 124: [105.27553]\n",
      "Loss in epoch 125: [105.25563]\n",
      "Loss in epoch 126: [105.2531]\n",
      "Loss in epoch 127: [105.21104]\n",
      "Loss in epoch 128: [105.20719]\n",
      "Loss in epoch 129: [105.86772]\n",
      "Loss in epoch 130: [105.97548]\n",
      "Loss in epoch 131: [105.78217]\n",
      "Loss in epoch 132: [105.66289]\n",
      "Loss in epoch 133: [105.54563]\n",
      "Loss in epoch 134: [105.37349]\n",
      "Loss in epoch 135: [105.18407]\n",
      "Loss in epoch 136: [105.01243]\n",
      "Loss in epoch 137: [104.937]\n",
      "Loss in epoch 138: [105.03816]\n",
      "Loss in epoch 139: [104.96893]\n",
      "Loss in epoch 140: [104.98098]\n",
      "Loss in epoch 141: [105.32981]\n",
      "Loss in epoch 142: [105.71464]\n",
      "Loss in epoch 143: [105.96604]\n",
      "Loss in epoch 144: [106.50842]\n",
      "Loss in epoch 145: [106.62083]\n",
      "Loss in epoch 146: [106.5014]\n",
      "Loss in epoch 147: [106.38643]\n",
      "Loss in epoch 148: [106.27866]\n",
      "Loss in epoch 149: [106.27516]\n",
      "Loss in epoch 150: [106.17442]\n",
      "Loss in epoch 151: [106.08091]\n",
      "Loss in epoch 152: [105.99892]\n",
      "Loss in epoch 153: [105.91847]\n",
      "Loss in epoch 154: [106.11143]\n",
      "Loss in epoch 155: [106.05182]\n",
      "Loss in epoch 156: [105.46002]\n",
      "Loss in epoch 157: [105.36957]\n",
      "Loss in epoch 158: [105.2488]\n",
      "Loss in epoch 159: [105.16957]\n",
      "Loss in epoch 160: [105.10337]\n",
      "Loss in epoch 161: [105.04642]\n",
      "Loss in epoch 162: [104.96291]\n",
      "Loss in epoch 163: [104.66254]\n",
      "Loss in epoch 164: [104.59531]\n",
      "Loss in epoch 165: [104.51109]\n",
      "Loss in epoch 166: [104.45829]\n",
      "Loss in epoch 167: [104.40084]\n",
      "Loss in epoch 168: [104.3483]\n",
      "Loss in epoch 169: [104.30112]\n",
      "Loss in epoch 170: [104.24899]\n",
      "Loss in epoch 171: [104.20287]\n",
      "Loss in epoch 172: [104.1557]\n",
      "Loss in epoch 173: [104.11155]\n",
      "Loss in epoch 174: [104.06498]\n",
      "Loss in epoch 175: [104.02974]\n",
      "Loss in epoch 176: [103.9942]\n",
      "Loss in epoch 177: [104.41832]\n",
      "Loss in epoch 178: [104.38087]\n",
      "Loss in epoch 179: [104.32619]\n",
      "Loss in epoch 180: [104.29173]\n",
      "Loss in epoch 181: [104.25578]\n",
      "Loss in epoch 182: [104.33297]\n",
      "Loss in epoch 183: [104.30326]\n",
      "Loss in epoch 184: [104.26549]\n",
      "Loss in epoch 185: [104.23851]\n",
      "Loss in epoch 186: [104.20677]\n",
      "Loss in epoch 187: [104.15575]\n",
      "Loss in epoch 188: [104.12451]\n",
      "Loss in epoch 189: [104.09601]\n",
      "Loss in epoch 190: [104.06459]\n",
      "Loss in epoch 191: [104.03446]\n",
      "Loss in epoch 192: [103.53446]\n",
      "Loss in epoch 193: [103.51683]\n",
      "Loss in epoch 194: [103.49626]\n",
      "Loss in epoch 195: [103.47748]\n",
      "Loss in epoch 196: [103.45612]\n",
      "Loss in epoch 197: [103.43909]\n",
      "Loss in epoch 198: [103.42061]\n",
      "Loss in epoch 199: [103.40404]\n",
      "Loss in epoch 200: [103.38739]\n",
      "Loss in epoch 201: [103.37773]\n",
      "Loss in epoch 202: [103.36079]\n",
      "Loss in epoch 203: [103.34569]\n",
      "Loss in epoch 204: [103.33253]\n",
      "Loss in epoch 205: [103.32438]\n",
      "Loss in epoch 206: [103.31079]\n",
      "Loss in epoch 207: [103.30483]\n",
      "Loss in epoch 208: [103.30034]\n",
      "Loss in epoch 209: [103.28945]\n",
      "Loss in epoch 210: [103.28397]\n",
      "Loss in epoch 211: [103.27812]\n",
      "Loss in epoch 212: [103.27213]\n",
      "Loss in epoch 213: [103.26155]\n",
      "Loss in epoch 214: [103.25635]\n",
      "Loss in epoch 215: [103.25143]\n",
      "Loss in epoch 216: [103.24347]\n",
      "Loss in epoch 217: [103.23428]\n",
      "Loss in epoch 218: [103.2275]\n",
      "Loss in epoch 219: [103.22331]\n",
      "Loss in epoch 220: [103.21592]\n",
      "Loss in epoch 221: [103.20644]\n",
      "Loss in epoch 222: [103.20005]\n",
      "Loss in epoch 223: [103.19603]\n",
      "Loss in epoch 224: [103.19171]\n",
      "Loss in epoch 225: [103.18015]\n",
      "Loss in epoch 226: [103.17311]\n",
      "Loss in epoch 227: [103.17336]\n",
      "Loss in epoch 228: [103.16404]\n",
      "Loss in epoch 229: [103.15456]\n",
      "Loss in epoch 230: [103.1511]\n",
      "Loss in epoch 231: [103.14488]\n",
      "Loss in epoch 232: [103.14043]\n",
      "Loss in epoch 233: [103.13071]\n",
      "Loss in epoch 234: [103.12306]\n",
      "Loss in epoch 235: [103.11922]\n",
      "Loss in epoch 236: [103.11461]\n",
      "Loss in epoch 237: [103.10451]\n",
      "Loss in epoch 238: [103.09713]\n",
      "Loss in epoch 239: [103.09617]\n",
      "Loss in epoch 240: [103.08458]\n",
      "Loss in epoch 241: [103.07784]\n",
      "Loss in epoch 242: [103.07137]\n",
      "Loss in epoch 243: [103.07106]\n",
      "Loss in epoch 244: [103.06111]\n",
      "Loss in epoch 245: [103.05609]\n",
      "Loss in epoch 246: [103.05338]\n",
      "Loss in epoch 247: [103.05359]\n",
      "Loss in epoch 248: [103.04533]\n",
      "Loss in epoch 249: [103.04036]\n",
      "Loss in epoch 250: [103.04128]\n",
      "Loss in epoch 251: [103.03619]\n",
      "Loss in epoch 252: [103.0342]\n",
      "Loss in epoch 253: [103.02726]\n",
      "Loss in epoch 254: [103.02737]\n",
      "Loss in epoch 255: [103.02663]\n",
      "Loss in epoch 256: [103.01962]\n",
      "Loss in epoch 257: [103.02236]\n",
      "Loss in epoch 258: [103.01788]\n",
      "Loss in epoch 259: [103.01799]\n",
      "Loss in epoch 260: [103.01035]\n",
      "Loss in epoch 261: [103.01256]\n",
      "Loss in epoch 262: [103.0092]\n",
      "Loss in epoch 263: [103.00792]\n",
      "Loss in epoch 264: [103.00084]\n",
      "Loss in epoch 265: [103.00279]\n",
      "Loss in epoch 266: [102.99979]\n",
      "Loss in epoch 267: [102.99825]\n",
      "Loss in epoch 268: [102.99226]\n",
      "Loss in epoch 269: [102.99503]\n",
      "Loss in epoch 270: [102.99308]\n",
      "Loss in epoch 271: [102.99176]\n",
      "Loss in epoch 272: [102.98735]\n",
      "Loss in epoch 273: [102.99078]\n",
      "Loss in epoch 274: [102.9901]\n",
      "Loss in epoch 275: [102.98936]\n",
      "Loss in epoch 276: [102.98421]\n",
      "Loss in epoch 277: [102.98859]\n",
      "Loss in epoch 278: [102.98712]\n",
      "Loss in epoch 279: [102.98698]\n",
      "Loss in epoch 280: [102.98147]\n",
      "Loss in epoch 281: [102.98643]\n",
      "Loss in epoch 282: [102.98476]\n",
      "Loss in epoch 283: [102.98387]\n",
      "Loss in epoch 284: [102.98155]\n",
      "Loss in epoch 285: [102.98567]\n",
      "Loss in epoch 286: [102.98244]\n",
      "Loss in epoch 287: [102.98271]\n",
      "Loss in epoch 288: [102.98013]\n",
      "Loss in epoch 289: [102.9847]\n",
      "Loss in epoch 290: [102.98106]\n",
      "Loss in epoch 291: [102.98152]\n",
      "Loss in epoch 292: [102.97878]\n",
      "Loss in epoch 293: [102.9837]\n",
      "Loss in epoch 294: [102.97975]\n",
      "Loss in epoch 295: [102.98041]\n",
      "Loss in epoch 296: [102.98069]\n",
      "Loss in epoch 297: [102.97933]\n",
      "Loss in epoch 298: [102.97849]\n",
      "Loss in epoch 299: [102.97961]\n",
      "Loss in epoch 300: [102.97945]\n",
      "Loss in epoch 301: [102.97827]\n",
      "Loss in epoch 302: [102.97723]\n",
      "Loss in epoch 303: [102.97878]\n",
      "Loss in epoch 304: [102.97821]\n",
      "Loss in epoch 305: [102.97721]\n",
      "Loss in epoch 306: [102.97599]\n",
      "Loss in epoch 307: [102.97794]\n",
      "Loss in epoch 308: [102.97697]\n",
      "Loss in epoch 309: [102.97616]\n",
      "Loss in epoch 310: [102.97475]\n",
      "Loss in epoch 311: [102.9771]\n",
      "Loss in epoch 312: [102.97573]\n",
      "Loss in epoch 313: [102.9751]\n",
      "Loss in epoch 314: [102.97351]\n",
      "Loss in epoch 315: [102.97623]\n",
      "Loss in epoch 316: [102.9745]\n",
      "Loss in epoch 317: [102.97404]\n",
      "Loss in epoch 318: [102.97227]\n",
      "Loss in epoch 319: [102.97536]\n",
      "Loss in epoch 320: [102.97327]\n",
      "Loss in epoch 321: [102.97298]\n",
      "Loss in epoch 322: [102.97103]\n",
      "Loss in epoch 323: [102.9745]\n",
      "Loss in epoch 324: [102.97202]\n",
      "Loss in epoch 325: [102.97194]\n",
      "Loss in epoch 326: [102.96979]\n",
      "Loss in epoch 327: [102.97363]\n",
      "Loss in epoch 328: [102.97079]\n",
      "Loss in epoch 329: [102.97087]\n",
      "Loss in epoch 330: [102.96855]\n",
      "Loss in epoch 331: [102.97276]\n",
      "Loss in epoch 332: [102.96956]\n",
      "Loss in epoch 333: [102.96981]\n",
      "Loss in epoch 334: [102.96732]\n",
      "Loss in epoch 335: [102.97189]\n",
      "Loss in epoch 336: [102.96831]\n",
      "Loss in epoch 337: [102.96877]\n",
      "Loss in epoch 338: [102.96608]\n",
      "Loss in epoch 339: [102.97101]\n",
      "Loss in epoch 340: [102.96708]\n",
      "Loss in epoch 341: [102.96775]\n",
      "Loss in epoch 342: [102.96804]\n",
      "Loss in epoch 343: [102.96669]\n",
      "Loss in epoch 344: [102.96587]\n",
      "Loss in epoch 345: [102.967]\n",
      "Loss in epoch 346: [102.96684]\n",
      "Loss in epoch 347: [102.96566]\n",
      "Loss in epoch 348: [102.96465]\n",
      "Loss in epoch 349: [102.96621]\n",
      "Loss in epoch 350: [102.96562]\n",
      "Loss in epoch 351: [102.96464]\n",
      "Loss in epoch 352: [102.96342]\n",
      "Loss in epoch 353: [102.96538]\n",
      "Loss in epoch 354: [102.9644]\n",
      "Loss in epoch 355: [102.96358]\n",
      "Loss in epoch 356: [102.96218]\n",
      "Loss in epoch 357: [102.96455]\n",
      "Loss in epoch 358: [102.96317]\n",
      "Loss in epoch 359: [102.96255]\n",
      "Loss in epoch 360: [102.96095]\n",
      "Loss in epoch 361: [102.9637]\n",
      "Loss in epoch 362: [102.96194]\n",
      "Loss in epoch 363: [102.9615]\n",
      "Loss in epoch 364: [102.95972]\n",
      "Loss in epoch 365: [102.96284]\n",
      "Loss in epoch 366: [102.96071]\n",
      "Loss in epoch 367: [102.96045]\n",
      "Loss in epoch 368: [102.95848]\n",
      "Loss in epoch 369: [102.96198]\n",
      "Loss in epoch 370: [102.95947]\n",
      "Loss in epoch 371: [102.95939]\n",
      "Loss in epoch 372: [102.95725]\n",
      "Loss in epoch 373: [102.96111]\n",
      "Loss in epoch 374: [102.95824]\n",
      "Loss in epoch 375: [102.95834]\n",
      "Loss in epoch 376: [102.95601]\n",
      "Loss in epoch 377: [102.96024]\n",
      "Loss in epoch 378: [102.95701]\n",
      "Loss in epoch 379: [102.95729]\n",
      "Loss in epoch 380: [102.95477]\n",
      "Loss in epoch 381: [102.95937]\n",
      "Loss in epoch 382: [102.95577]\n",
      "Loss in epoch 383: [102.95622]\n",
      "Loss in epoch 384: [102.95354]\n",
      "Loss in epoch 385: [102.9585]\n",
      "Loss in epoch 386: [102.95453]\n",
      "Loss in epoch 387: [102.95522]\n",
      "Loss in epoch 388: [102.95549]\n",
      "Loss in epoch 389: [102.95415]\n",
      "Loss in epoch 390: [102.95332]\n",
      "Loss in epoch 391: [102.95448]\n",
      "Loss in epoch 392: [102.9543]\n",
      "Loss in epoch 393: [102.95314]\n",
      "Loss in epoch 394: [102.9521]\n",
      "Loss in epoch 395: [102.95369]\n",
      "Loss in epoch 396: [102.95308]\n",
      "Loss in epoch 397: [102.9521]\n",
      "Loss in epoch 398: [102.95088]\n",
      "Loss in epoch 399: [102.95287]\n",
      "Loss in epoch 400: [102.95186]\n",
      "Loss in epoch 401: [102.95107]\n",
      "Loss in epoch 402: [102.94965]\n",
      "Loss in epoch 403: [102.95203]\n",
      "Loss in epoch 404: [102.95064]\n",
      "Loss in epoch 405: [102.95001]\n",
      "Loss in epoch 406: [102.94841]\n",
      "Loss in epoch 407: [102.95119]\n",
      "Loss in epoch 408: [102.9494]\n",
      "Loss in epoch 409: [102.94896]\n",
      "Loss in epoch 410: [102.94718]\n",
      "Loss in epoch 411: [102.95032]\n",
      "Loss in epoch 412: [102.94817]\n",
      "Loss in epoch 413: [102.94791]\n",
      "Loss in epoch 414: [102.94595]\n",
      "Loss in epoch 415: [102.94945]\n",
      "Loss in epoch 416: [102.94694]\n",
      "Loss in epoch 417: [102.94686]\n",
      "Loss in epoch 418: [102.9447]\n",
      "Loss in epoch 419: [102.94859]\n",
      "Loss in epoch 420: [102.94539]\n",
      "Loss in epoch 421: [102.9496]\n",
      "Loss in epoch 422: [102.94535]\n",
      "Loss in epoch 423: [102.94924]\n",
      "Loss in epoch 424: [102.94534]\n",
      "Loss in epoch 425: [102.949]\n",
      "Loss in epoch 426: [102.94531]\n",
      "Loss in epoch 427: [102.94883]\n",
      "Loss in epoch 428: [102.9453]\n",
      "Loss in epoch 429: [102.94869]\n",
      "Loss in epoch 430: [102.94529]\n",
      "Loss in epoch 431: [102.94859]\n",
      "Loss in epoch 432: [102.94529]\n",
      "Loss in epoch 433: [102.94852]\n",
      "Loss in epoch 434: [102.94527]\n",
      "Loss in epoch 435: [102.94846]\n",
      "Loss in epoch 436: [102.94527]\n",
      "Loss in epoch 437: [102.94843]\n",
      "Loss in epoch 438: [102.94527]\n",
      "Loss in epoch 439: [102.94839]\n",
      "Loss in epoch 440: [102.94527]\n",
      "Loss in epoch 441: [102.94836]\n",
      "Loss in epoch 442: [102.94527]\n",
      "Loss in epoch 443: [102.94834]\n",
      "Loss in epoch 444: [102.94527]\n",
      "Loss in epoch 445: [102.94832]\n",
      "Loss in epoch 446: [102.94525]\n",
      "Loss in epoch 447: [102.9483]\n",
      "Loss in epoch 448: [102.94525]\n",
      "Loss in epoch 449: [102.94829]\n",
      "Loss in epoch 450: [102.94525]\n",
      "Loss in epoch 451: [102.94828]\n",
      "Loss in epoch 452: [102.94525]\n",
      "Loss in epoch 453: [102.94828]\n",
      "Loss in epoch 454: [102.94525]\n",
      "Loss in epoch 455: [102.94827]\n",
      "Loss in epoch 456: [102.94525]\n",
      "Loss in epoch 457: [102.94827]\n",
      "Loss in epoch 458: [102.94525]\n",
      "Loss in epoch 459: [102.94827]\n",
      "Loss in epoch 460: [102.94525]\n",
      "Loss in epoch 461: [102.94826]\n",
      "Loss in epoch 462: [102.94525]\n",
      "Loss in epoch 463: [102.94826]\n",
      "Loss in epoch 464: [102.94525]\n",
      "Loss in epoch 465: [102.94826]\n",
      "Loss in epoch 466: [102.94525]\n",
      "Loss in epoch 467: [102.94826]\n",
      "Loss in epoch 468: [102.94525]\n",
      "Loss in epoch 469: [102.94826]\n",
      "Loss in epoch 470: [102.94525]\n",
      "Loss in epoch 471: [102.94826]\n",
      "Loss in epoch 472: [102.94525]\n",
      "Loss in epoch 473: [102.94824]\n",
      "Loss in epoch 474: [102.94525]\n",
      "Loss in epoch 475: [102.94824]\n",
      "Loss in epoch 476: [102.94525]\n",
      "Loss in epoch 477: [102.94824]\n",
      "Loss in epoch 478: [102.94525]\n",
      "Loss in epoch 479: [102.94824]\n",
      "Loss in epoch 480: [102.94525]\n",
      "Loss in epoch 481: [102.94824]\n",
      "Loss in epoch 482: [102.94525]\n",
      "Loss in epoch 483: [102.94824]\n",
      "Loss in epoch 484: [102.94525]\n",
      "Loss in epoch 485: [102.94824]\n",
      "Loss in epoch 486: [102.94525]\n",
      "Loss in epoch 487: [102.94824]\n",
      "Loss in epoch 488: [102.94525]\n",
      "Loss in epoch 489: [102.94824]\n",
      "Loss in epoch 490: [102.94525]\n",
      "Loss in epoch 491: [102.94824]\n",
      "Loss in epoch 492: [102.94525]\n",
      "Loss in epoch 493: [102.94824]\n",
      "Loss in epoch 494: [102.94525]\n",
      "Loss in epoch 495: [102.94824]\n",
      "Loss in epoch 496: [102.94525]\n",
      "Loss in epoch 497: [102.94824]\n",
      "Loss in epoch 498: [102.94525]\n",
      "Loss in epoch 499: [102.94824]\n",
      "[3]\n",
      "Optimal Action Squence:[[  1.00000000e+00  -6.61000013e-02]\n",
      " [  1.00000000e+00   1.00000000e+00]\n",
      " [  1.00000000e+00   1.00000000e+00]\n",
      " [  1.00000000e+00   1.00000000e+00]\n",
      " [  1.00000000e+00   1.00000000e+00]\n",
      " [  1.00000000e+00   1.00000000e+00]\n",
      " [  1.00000000e+00   1.00000000e+00]\n",
      " [  9.96500015e-01   1.00000000e+00]\n",
      " [  9.92100000e-01   1.00000000e+00]\n",
      " [  5.49999997e-03   9.93600011e-01]\n",
      " [ -1.44999996e-02   3.00000014e-04]\n",
      " [ -6.50200009e-01   1.67699993e-01]]\n",
      "Best Cost: [-85.45387268]\n",
      "The last state:[ 7.32938337  8.1615715 ]\n",
      "Rewards each time step:[[ -1.60000000e+01]\n",
      " [ -1.50000000e+01]\n",
      " [ -1.30000000e+01]\n",
      " [ -1.10000000e+01]\n",
      " [ -9.00000000e+00]\n",
      " [ -7.00000000e+00]\n",
      " [ -5.80000019e+00]\n",
      " [ -4.60000038e+00]\n",
      " [ -3.00351286e+00]\n",
      " [ -1.01143837e+00]\n",
      " [ -1.23825073e-02]\n",
      " [ -2.65393257e-02]]\n",
      "Intermediate states:[[ 1.          0.        ]\n",
      " [ 2.          1.        ]\n",
      " [ 3.          2.        ]\n",
      " [ 4.          3.        ]\n",
      " [ 5.          4.        ]\n",
      " [ 5.5999999   4.5999999 ]\n",
      " [ 6.19999981  5.19999981]\n",
      " [ 6.99648714  6.        ]\n",
      " [ 7.98856163  7.        ]\n",
      " [ 7.9940443   7.99357319]\n",
      " [ 7.97957945  7.99388123]\n",
      " [ 7.32938337  8.1615715 ]]\n"
     ]
    }
   ],
   "source": [
    "rnn_inst.Optimize(500)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
